cmake_minimum_required(VERSION 3.5.1)

project(ixr_engine VERSION 0.2.0)
ixr_require_cxx_standard(14)
if(MSVC)
  ignore_warning(4100)
endif()

option(IXR_ENGINE_INCLUDE_DIRECTX11 "Include dx11 implementations" ON)
option(IXR_ENGINE_INCLUDE_DIRECTX12 "Include dx12 implementations" OFF)
option(IXR_ENGINE_INCLUDE_OPENGL "Include OpenGL implementations" OFF)
option(IXR_ENGINE_INCLUDE_VULKAN "Include VULKAN implementations" OFF)
option(IXR_ENGINE_MATH_DIRECTXMATH "Use DirectXMath as math backend" ON)
option(IXR_ENGINE_MATH_GLM "Use glm as math backend" OFF)
option(IXR_ENGINE_BUILD_SHARED "Build shared library" OFF)

# core
file(GLOB_RECURSE core     ${PROJECT_ROOT_DIR}/graphic/core/*.cc     ${PROJECT_ROOT_DIR}/graphic/core/*.h)
file(GLOB_RECURSE errors   ${PROJECT_ROOT_DIR}/graphic/errors/*.cc   ${PROJECT_ROOT_DIR}/graphic/errors/*.h)
file(GLOB_RECURSE math     ${PROJECT_ROOT_DIR}/graphic/math/*.cc     ${PROJECT_ROOT_DIR}/graphic/math/*.h)
file(GLOB_RECURSE model    ${PROJECT_ROOT_DIR}/graphic/model/*.cc    ${PROJECT_ROOT_DIR}/graphic/model/*.h)
file(GLOB_RECURSE platform ${PROJECT_ROOT_DIR}/graphic/platform/*.cc ${PROJECT_ROOT_DIR}/graphic/platform/*.h)
file(GLOB_RECURSE utils    ${PROJECT_ROOT_DIR}/graphic/utils/*.cc    ${PROJECT_ROOT_DIR}/graphic/utils/*.h)
file(GLOB dx11    ${PROJECT_ROOT_DIR}/graphic/low_level/dx11/*.cc    low_level/dx11/*.h)
file(GLOB dx12    ${PROJECT_ROOT_DIR}/graphic/low_level/dx12/*.cc    low_level/dx12/*.h)
file(GLOB gl      ${PROJECT_ROOT_DIR}/graphic/low_level/gl/*.cc      low_level/gl/*.h)
file(GLOB vulkan  ${PROJECT_ROOT_DIR}/graphic/low_level/vulkan/*.cc  low_level/vulkan/*.h)
file(GLOB engine  ${PROJECT_ROOT_DIR}/graphic/engine/*.cc engine/*.h)

if(IXR_ENGINE_INCLUDE_DIRECTX11)
  add_definitions(-DIXR_ENGINE_INCLUDE_DIRECTX11)
  add_library(dx11 OBJECT ${dx11})
  target_include_directories(dx11 PRIVATE ${PROJECT_ROOT_DIR}/graphic)
  set_target_properties(dx11 PROPERTIES FOLDER "ixr_engine/low_level")
  list(APPEND link_libs d3d11 dxgi d3dcompiler)
  list(APPEND low_level_libs dx11)
endif()
if(IXR_ENGINE_INCLUDE_DIRECTX12)
  add_definitions(-DIXR_ENGINE_INCLUDE_DIRECTX12)
  add_library(dx12 OBJECT ${dx12})
  target_include_directories(dx12 PRIVATE ${PROJECT_ROOT_DIR}/graphic)
  set_target_properties(dx12 PROPERTIES FOLDER "ixr_engine/low_level")
  list(APPEND link_libs d3d11 dxgi d3dcompiler)
  list(APPEND low_level_libs dx12)
endif()
if(IXR_ENGINE_INCLUDE_OPENGL)
  add_definitions(-DIXR_ENGINE_INCLUDE_OPENGL)
  add_library(gl OBJECT ${gl})
  target_include_directories(gl PRIVATE ${PROJECT_ROOT_DIR}/graphic)
  set_target_properties(gl PROPERTIES FOLDER "ixr_engine/low_level")
  list(APPEND low_level_libs gl)
endif()
if(IXR_ENGINE_INCLUDE_VULKAN)
  find_package(Vulkan REQUIRED)
  add_definitions(-DIXR_ENGINE_INCLUDE_VULKAN)
  add_library(vulkan OBJECT ${vulkan})
  target_include_directories(vulkan PRIVATE
    ${PROJECT_ROOT_DIR}/graphic
    ${Vulkan_INCLUDE_DIRS})
  set_target_properties(vulkan PROPERTIES FOLDER "ixRengine/low_level")
  list(APPEND link_libs Vulkan::Vulkan)
  list(APPEND low_level_libs vulkan)
  ixr_add_vulkan_definitions()
endif()

macro(engine_module_add target)
  add_library(engine_${target} OBJECT ${${target}})
  target_include_directories(engine_${target} PRIVATE ${PROJECT_ROOT_DIR}/graphic)
  set_target_properties(engine_${target} PROPERTIES FOLDER "ixr_engine/module")
  if(IXR_ENGINE_BUILD_SHARED)
    target_compile_definitions(engine_${target} PRIVATE ixr_engine_EXPORTS)
  endif()
  list(APPEND libengine engine_${target})
endmacro()

engine_module_add(core)
engine_module_add(platform)
engine_module_add(errors)
engine_module_add(math)
engine_module_add(model)
# engine_module_add(utils)
list(APPEND libengine ${low_level_libs})

foreach(lib ${libengine})
  list(APPEND src $<TARGET_OBJECTS:${lib}>)
endforeach()
list(APPEND src ${engine})

if(IXR_ENGINE_MATH_DIRECTXMATH)
  add_definitions(-DIXR_MATH_BACKEND_DIRECTXMATH)
elseif(IXR_ENGINE_MATH_GLM)
  include(glm)
  add_definitions(-DIXR_MATH_BACKEND_GLM)
endif()
if(IXR_ENGINE_BUILD_SHARED)
  # message(FATAL_ERROR "Export dll is not supported for now")
  add_definitions(-DIXR_ENGINE_SHARED_LIBS)
  add_library(ixr_engine SHARED ${src})
else()
  add_library(ixr_engine STATIC ${src})  
endif()
target_link_libraries(ixr_engine ${link_libs})
target_include_directories(ixr_engine PUBLIC ${PROJECT_ROOT_DIR}/graphic)
set_target_properties(ixr_engine PROPERTIES FOLDER "ixr_engine")

macro(copy_engine_dependent_to target)
  if(IXR_ENGINE_BUILD_SHARED)
    add_custom_command(TARGET ${target} POST_BUILD
      COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:ixr_engine> $<TARGET_FILE_DIR:${target}>
      COMMENT "copy ixr_engine.dll"
      VERBATIM)
  endif()
endmacro()
